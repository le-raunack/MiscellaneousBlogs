{"version":3,"sources":["webpack:///./src/components/AuthorAndDate.js","webpack:///./src/util/utilityFunctions.js","webpack:///./src/components/LatestPosts.js","webpack:///./src/templates/single-post.js","webpack:///./src/components/Posts.js","webpack:///./src/components/Tags.js"],"names":["AuthorAndDate","author","date","className","to","slugify","module","exports","text","toString","toLowerCase","replace","latestPostQuery","LatestPosts","query","render","data","allMarkdownRemark","edges","map","node","key","id","title","frontmatter","slug","fields","tags","imgSrc","image","childImageSharp","fluid","src","postQuery","SinglePost","post","markdownRemark","alt","tagsList","dangerouslySetInnerHTML","__html","html","Posts","clName","width","height","Tags","tag"],"mappings":"2FAAA,iDAYeA,IARO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC/B,OACE,uBAAGC,UAAU,QAAb,MACK,kBAAC,OAAD,CAAMC,GAAE,YAAcC,kBAAQJ,GAAWE,UAAU,QAAQF,GADhE,QACoFC,EADpF,O,qBCKJI,EAAOC,QAAU,CAAEF,QAXH,SAAUG,GACxB,OAAOA,EACJC,WACAC,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,O,kCCRpB,iDAiCaC,EAAe,aA+BbC,IA5DK,kBAClB,kBAAC,cAAD,CACEC,MAAOF,EACPG,OAAQ,SAAAC,GACN,OACE,oCACE,4CACA,6BAASb,UAAU,mBAChBa,EAAKC,kBAAkBC,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAChC,kBAAC,IAAD,CACEC,IAAKD,EAAKE,GACVC,MAAOH,EAAKI,YAAYD,MACxBtB,OAAQmB,EAAKI,YAAYvB,OACzBC,KAAMkB,EAAKI,YAAYtB,KACvBuB,KAAML,EAAKM,OAAOD,KAClBE,KAAMP,EAAKI,YAAYG,KACvBC,OAAQR,EAAKI,YAAYK,MAAM,GAAGC,gBAAgBC,MAAMC,SAG5D,kBAAC,OAAD,CAAM5B,GAAG,aACP,4BAAQD,UAAU,OAAlB,wB,kCCxBd,kJAgCa8B,EAAS,WA0BPC,UAhDI,SAAC,GAAc,IAAZlB,EAAW,EAAXA,KACdmB,EAAOnB,EAAKoB,eAAeZ,YACjC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKD,MAAOY,EAAKZ,QACjB,iCACE,uBAAGD,GAAG,qBAAqBa,EAAKZ,OAChC,yBAAKS,IAAG,KAAOG,EAAKN,MAAM,GAAGC,gBAAgBC,MAAMC,IAAOK,IAAI,eAC9D,6BAASlC,UAAU,yBACjB,kBAAC,IAAD,CAAeF,OAAQkC,EAAKlC,OAAQC,KAAMiC,EAAKjC,OAC/C,kBAAC,IAAD,CAAMoC,SAAUH,EAAKR,OACrB,6BACEY,wBAAyB,CAAEC,OAAQxB,EAAKoB,eAAeK,MACvDtC,UAAU,wBAGd,kBAAC,IAAD,U,kCC1BR,yEAoCeuC,IA7BD,SAAC,GAA8D,IAA5DnB,EAA2D,EAA3DA,MAAOE,EAAoD,EAApDA,KAAMxB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,KAAM0B,EAAgC,EAAhCA,OAAQD,EAAwB,EAAxBA,KAAwB,IAAlBgB,cAAkB,MAAT,GAAS,EAC1E,OACE,kBAAC,OAAD,CAAMvC,GAAE,IAAMqB,GACZ,6BAAStB,UAAS,QAAUwC,GAC1B,yBACEX,IAAG,KAAOJ,EACVS,IAAI,aACJO,MAAM,QACNC,OAAO,QACPvB,GAAG,aACF,IACH,6BAASnB,UAAU,aACjB,4BAAKoB,GACL,kBAAC,IAAD,CAAetB,OAAQA,EAAQC,KAAMA,IACrC,kBAAC,IAAD,CAAMoC,SAAUX,S,kCCrB1B,iDAqBemB,IAhBf,YAA6B,IAAbR,EAAY,EAAZA,SACd,OACE,oCACGA,EAASnB,KAAI,SAAA4B,GAAG,OACf,kBAAC,OAAD,CAAM1B,IAAK0B,EAAK3C,GAAE,SAAWC,kBAAQ0C,IACnC,4BAAQ5C,UAAU,WAAW4C","file":"component---src-templates-single-post-js-63f06c041a6d17f12cbb.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { slugify } from \"../util/utilityFunctions\"\r\n\r\nconst AuthorAndDate = ({ author, date }) => {\r\n  return (\r\n    <p className=\"info\">\r\n      By <Link to={`/authors/${slugify(author)}`} className=\"link\">{author}</Link>, on {date}.\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AuthorAndDate\r\n","const slugify = function (text) {\r\n  return text\r\n    .toString()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n    .replace(/[^\\w-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/--+/g, \"-\") // Replace multiple - with single -\r\n    .replace(/^-+/, \"\") // Trim - from start of text\r\n    .replace(/-+$/, \"\") // Trim - from end of text\r\n}\r\n\r\nmodule.exports = { slugify }\r\n","import React from \"react\"\r\nimport Posts from \"../components/Posts\"\r\nimport { graphql, Link, StaticQuery } from \"gatsby\"\r\n\r\nconst LatestPosts = () => (\r\n  <StaticQuery\r\n    query={latestPostQuery}\r\n    render={data => {\r\n      return (\r\n        <>\r\n          <h2>Latest Blogs</h2>\r\n          <section className=\"posts-container\">\r\n            {data.allMarkdownRemark.edges.map(({ node }) => (\r\n              <Posts\r\n                key={node.id}\r\n                title={node.frontmatter.title}\r\n                author={node.frontmatter.author}\r\n                date={node.frontmatter.date}\r\n                slug={node.fields.slug}\r\n                tags={node.frontmatter.tags}\r\n                imgSrc={node.frontmatter.image[0].childImageSharp.fluid.src}\r\n              />\r\n            ))}\r\n            <Link to=\"/articles\">\r\n              <button className=\"tag\">More blogs â†’</button>\r\n            </Link>\r\n          </section>\r\n        </>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nexport const latestPostQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: 2\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMM Do YYYY\")\r\n            author\r\n            tags\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 512, maxHeight: 512) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default LatestPosts\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\nimport { graphql } from \"gatsby\"\r\nimport SEO from \"../components/seo\"\r\nimport \"../components/CSS/main.css\"\r\nimport Tags from \"../components/Tags\"\r\nimport AuthorAndDate from \"../components/AuthorAndDate\"\r\nimport LatestPosts from \"../components/LatestPosts\"\r\n\r\nconst SinglePost = ({ data }) => {\r\n  const post = data.markdownRemark.frontmatter\r\n  return (\r\n    <Layout>\r\n      <SEO title={post.title} />\r\n      <section>\r\n        <p id=\"single-blog-title\">{post.title}</p>\r\n        <img src={`./${post.image[0].childImageSharp.fluid.src}`} alt=\"Blog Cover\"/>\r\n        <section className=\"single-blog-container\">\r\n          <AuthorAndDate author={post.author} date={post.date} />\r\n          <Tags tagsList={post.tags} />\r\n          <section\r\n            dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }}\r\n            className=\"single-blog-matter\"\r\n          />\r\n        </section>\r\n        <LatestPosts />\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const postQuery = graphql`\r\n  query blogPostBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        title\r\n        author\r\n        tags\r\n        date(formatString: \"MMM Do YYYY\")\r\n        image {\r\n          childImageSharp {\r\n            fluid(maxHeight: 1080) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nSinglePost.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default SinglePost\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport \"../components/CSS/main.css\"\r\nimport Tags from \"./Tags\"\r\nimport AuthorAndDate from \"./AuthorAndDate\"\r\n\r\nconst Posts = ({ title, slug, author, date, imgSrc, tags, clName = \"\" }) => {\r\n  return (\r\n    <Link to={`/${slug}`}>\r\n      <section className={`post ${clName}`}>\r\n        <img\r\n          src={`./${imgSrc}`}\r\n          alt=\"Blog Cover\"\r\n          width=\"128px\"\r\n          height=\"128px\"\r\n          id=\"blog-img\"\r\n        />{\" \"}\r\n        <section className=\"blog-info\">\r\n          <h3>{title}</h3>\r\n          <AuthorAndDate author={author} date={date} />\r\n          <Tags tagsList={tags} />\r\n        </section>\r\n      </section>\r\n    </Link>\r\n  )\r\n}\r\n\r\nPosts.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  slug: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  tags: PropTypes.array,\r\n}\r\n\r\nexport default Posts\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport { slugify } from \"../util/utilityFunctions\"\r\n\r\nfunction Tags({ tagsList }) {\r\n  return (\r\n    <>\r\n      {tagsList.map(tag => (\r\n        <Link key={tag} to={`/tags/${slugify(tag)}`}>\r\n          <button className=\"tag-btn\">{tag}</button>\r\n        </Link>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  tagsList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Tags\r\n"],"sourceRoot":""}