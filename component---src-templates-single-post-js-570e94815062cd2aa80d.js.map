{"version":3,"sources":["webpack:///./src/components/AuthorAndDate.tsx","webpack:///./src/components/LatestPosts.tsx","webpack:///./src/components/Posts.tsx","webpack:///./src/util/utilityFunctions.js","webpack:///./src/components/RandomPosts.tsx","webpack:///./src/templates/single-post.js","webpack:///./src/components/Tags.tsx"],"names":["AuthorAndDate","author","date","className","to","slugify","latestPostQuery","LatestPosts","query","render","data","allMarkdownRemark","edges","map","node","key","id","title","frontmatter","slug","fields","tags","imgSrc","image","childImageSharp","fluid","src","Posts","clName","alt","width","height","tagsList","module","exports","text","toString","toLowerCase","replace","randomPostsQuery","RandomPosts","totalPostCount","totalCount","console","log","rngOne","Math","floor","random","rngTwo","post","postQuery","SinglePost","markdownRemark","Tags","dangerouslySetInnerHTML","__html","html","tag"],"mappings":"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","file":"component---src-templates-single-post-js-570e94815062cd2aa80d.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { slugify } from \"../util/utilityFunctions\"\r\nimport PropTypes from \"prop-types\"\r\n\r\ninterface AuthorAndDateProps {\r\n  author: string\r\n  date: string\r\n}\r\n\r\nconst AuthorAndDate: React.FC<AuthorAndDateProps> = ({\r\n  author,\r\n  date,\r\n}: AuthorAndDateProps) => {\r\n  return (\r\n    <p className=\"info\">\r\n      By{\" \"}\r\n      <Link to={`/authors/${slugify(author)}`} className=\"link\">\r\n        {author}\r\n      </Link>\r\n      , on {date}.\r\n    </p>\r\n  )\r\n}\r\n\r\nAuthorAndDate.propTypes = {\r\n  author: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default AuthorAndDate\r\n","import React from \"react\"\r\nimport Posts from \"./Posts\"\r\nimport { graphql, Link, StaticQuery } from \"gatsby\"\r\n\r\nconst LatestPosts: React.FC = () => (\r\n  <StaticQuery\r\n    query={latestPostQuery}\r\n    render={data => {\r\n      return (\r\n        <>\r\n          <h2>Latest Blogs</h2>\r\n          <section className=\"posts-container\">\r\n            {data.allMarkdownRemark.edges.map(({ node }) => (\r\n              <Posts\r\n                key={node.id}\r\n                title={node.frontmatter.title}\r\n                author={node.frontmatter.author}\r\n                date={node.frontmatter.date}\r\n                slug={node.fields.slug}\r\n                tags={node.frontmatter.tags}\r\n                imgSrc={node.frontmatter.image[0].childImageSharp.fluid.src}\r\n              />\r\n            ))}\r\n            <Link to=\"/articles\">\r\n              <button className=\"tag\">More blogs â†’</button>\r\n            </Link>\r\n          </section>\r\n        </>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nexport const latestPostQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      limit: 2\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMM Do YYYY\")\r\n            author\r\n            tags\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 512, maxHeight: 512) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default LatestPosts\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport \"../components/CSS/main.css\"\r\nimport Tags from \"./Tags\"\r\nimport AuthorAndDate from \"./AuthorAndDate\"\r\n\r\ninterface PostsProps {\r\n  title: string\r\n  slug: string\r\n  author: string\r\n  date?: string\r\n  imgSrc: string\r\n  tags: string[]\r\n  clName?: string\r\n}\r\n\r\nconst Posts: React.FC<PostsProps> = ({\r\n  title,\r\n  slug,\r\n  author,\r\n  date,\r\n  imgSrc,\r\n  tags,\r\n  clName = \"\",\r\n}: PostsProps) => {\r\n  return (\r\n    <Link to={`/${slug}`}>\r\n      <section className={`post ${clName}`}>\r\n        <img\r\n          src={imgSrc}\r\n          alt=\"Blog Cover\"\r\n          width=\"128px\"\r\n          height=\"128px\"\r\n          id=\"blog-img\"\r\n        />{\" \"}\r\n        <section className=\"blog-info\">\r\n          <h3>{title}</h3>\r\n          <AuthorAndDate author={author} date={date} />\r\n          <Tags tagsList={tags} />\r\n        </section>\r\n      </section>\r\n    </Link>\r\n  )\r\n}\r\n\r\nPosts.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  slug: PropTypes.string.isRequired,\r\n  date: PropTypes.string,\r\n  tags: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Posts\r\n","const slugify = function (text) {\r\n  return text\r\n    .toString()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n    .replace(/[^\\w-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/--+/g, \"-\") // Replace multiple - with single -\r\n    .replace(/^-+/, \"\") // Trim - from start of text\r\n    .replace(/-+$/, \"\") // Trim - from end of text\r\n}\r\n\r\nmodule.exports = { slugify }\r\n","import React from \"react\"\r\nimport { graphql, StaticQuery } from \"gatsby\"\r\nimport Posts from \"./Posts\"\r\n\r\nconst RandomPosts: React.FunctionComponent = () => (\r\n  <StaticQuery\r\n    query={randomPostsQuery}\r\n    render={data => {\r\n      const totalPostCount: number = data.allMarkdownRemark.totalCount - 2\r\n      console.log(totalPostCount)\r\n      let rngOne: number = Math.floor(Math.random() * totalPostCount)\r\n      let rngTwo: number = 0\r\n      do {\r\n        rngTwo = Math.floor(Math.random() * totalPostCount)\r\n      } while (rngTwo === rngOne)\r\n      console.log(rngOne, rngTwo)\r\n      console.log(data.allMarkdownRemark.edges)\r\n      const post: any = [\r\n        data.allMarkdownRemark.edges[rngOne],\r\n        data.allMarkdownRemark.edges[rngTwo],\r\n      ]\r\n      return (\r\n        <>\r\n          <h2>Also Read</h2>\r\n          <section className=\"posts-container\">\r\n            {post.map(({ node }) => (\r\n              <Posts\r\n                title={node.frontmatter.title}\r\n                slug={node.fields.slug}\r\n                author={node.frontmatter.author}\r\n                date={node.frontmatter.date}\r\n                imgSrc={node.frontmatter.image[0].childImageSharp.fluid.src}\r\n                tags={node.frontmatter.tags}\r\n              />\r\n            ))}\r\n          </section>\r\n        </>\r\n      )\r\n    }}\r\n  />\r\n)\r\n\r\nexport const randomPostsQuery = graphql`\r\n  query {\r\n    allMarkdownRemark {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            author\r\n            tags\r\n            date(formatString: \"MMM Do YYYY\")\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 512, maxHeight: 512) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default RandomPosts\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport Layout from \"../components/layout\"\r\nimport { graphql } from \"gatsby\"\r\nimport SEO from \"../components/seo\"\r\nimport \"../components/CSS/main.css\"\r\nimport Tags from \"../components/Tags.tsx\"\r\nimport AuthorAndDate from \"../components/AuthorAndDate.tsx\"\r\nimport LatestPosts from \"../components/LatestPosts.tsx\"\r\nimport RandomPosts from \"../components/RandomPosts.tsx\"\r\n\r\nconst SinglePost = ({ data }) => {\r\n  const post = data.markdownRemark.frontmatter\r\n  return (\r\n    <Layout>\r\n      <SEO title={post.title} />\r\n      <section>\r\n        <p id=\"single-blog-title\">{post.title}</p>\r\n        <img src={post.image[0].childImageSharp.fluid.src} alt=\"Blog Cover\"/>\r\n        <section className=\"single-blog-container\">\r\n          <AuthorAndDate author={post.author} date={post.date} />\r\n          <Tags tagsList={post.tags} />\r\n          <section\r\n            dangerouslySetInnerHTML={{ __html: data.markdownRemark.html }}\r\n            className=\"single-blog-matter\"\r\n          />\r\n        </section>\r\n        <LatestPosts />\r\n        <RandomPosts/>\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const postQuery = graphql`\r\n  query blogPostBySlug($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      id\r\n      html\r\n      frontmatter {\r\n        title\r\n        author\r\n        tags\r\n        date(formatString: \"MMM Do YYYY\")\r\n        image {\r\n          childImageSharp {\r\n            fluid(maxHeight: 1080) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nSinglePost.propTypes = {\r\n  data: PropTypes.object.isRequired,\r\n}\r\n\r\nexport default SinglePost\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport { slugify } from \"../util/utilityFunctions\"\r\n\r\ninterface TagsProps {\r\n  tagsList: string[]\r\n}\r\n\r\nconst Tags: React.FC<TagsProps> = ({ tagsList }: TagsProps) => (\r\n  <>\r\n    {tagsList.map(tag => (\r\n      <Link key={tag} to={`/tags/${slugify(tag)}`}>\r\n        <button className=\"tag-btn\">{tag}</button>\r\n      </Link>\r\n    ))}\r\n  </>\r\n)\r\n\r\nTags.propTypes = {\r\n  tagsList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Tags\r\n"],"sourceRoot":""}