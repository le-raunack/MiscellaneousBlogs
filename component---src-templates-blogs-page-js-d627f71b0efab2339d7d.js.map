{"version":3,"sources":["webpack:///./src/components/AuthorAndDate.js","webpack:///./src/util/utilityFunctions.js","webpack:///./src/templates/blogs-page.js","webpack:///./src/components/Posts.js","webpack:///./src/components/Tags.js"],"names":["AuthorAndDate","author","date","className","to","slugify","module","exports","text","toString","toLowerCase","replace","blogsQuery","BlogsPage","post","data","allMarkdownRemark","title","edges","map","node","key","id","slug","fields","frontmatter","tags","imgSrc","image","slice","i","childImageSharp","fluid","src","Posts","clName","alt","width","height","tagsList","Tags","tag"],"mappings":"2FAAA,iDAYeA,IARO,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC/B,OACE,uBAAGC,UAAU,QAAb,MACK,kBAAC,OAAD,CAAMC,GAAE,YAAcC,kBAAQJ,GAAWE,UAAU,QAAQF,GADhE,QACoFC,EADpF,O,qBCKJI,EAAOC,QAAU,CAAEF,QAXH,SAAUG,GACxB,OAAOA,EACJC,WACAC,cACAC,QAAQ,OAAQ,KAChBA,QAAQ,WAAY,IACpBA,QAAQ,OAAQ,KAChBA,QAAQ,MAAO,IACfA,QAAQ,MAAO,O,kCCRpB,+GA8BaC,EAAU,aA6BRC,UArDG,SAAC,GAAc,IACzBC,EADwB,EAAXC,KACDC,kBAClB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,iBACX,6BAASd,UAAU,aAChBW,EAAKI,MAAMC,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OACd,kBAAC,IAAD,CACEC,IAAKD,EAAKE,GACVC,KAAMH,EAAKI,OAAOD,KAClBN,MAAOG,EAAKK,YAAYR,MACxBhB,OAAQmB,EAAKK,YAAYxB,OACzBC,KAAMkB,EAAKK,YAAYvB,KACvBwB,KAAMN,EAAKK,YAAYC,KACvBC,OAAQP,EAAKK,YAAYG,MACtBC,MAAM,EAAG,GACTV,KAAI,SAAAW,GAAC,OAAIA,EAAEC,gBAAgBC,MAAMC,gB,kCCtBhD,yEAoCeC,IA7BD,SAAC,GAA8D,IAA5DjB,EAA2D,EAA3DA,MAAOM,EAAoD,EAApDA,KAAMtB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,KAAMyB,EAAgC,EAAhCA,OAAQD,EAAwB,EAAxBA,KAAwB,IAAlBS,cAAkB,MAAT,GAAS,EAC1E,OACE,kBAAC,OAAD,CAAM/B,GAAE,IAAMmB,GACZ,6BAASpB,UAAS,QAAUgC,GAC1B,yBACEF,IAAKN,EACLS,IAAI,aACJC,MAAM,QACNC,OAAO,QACPhB,GAAG,aACF,IACH,6BAASnB,UAAU,aACjB,4BAAKc,GACL,kBAAC,IAAD,CAAehB,OAAQA,EAAQC,KAAMA,IACrC,kBAAC,IAAD,CAAMqC,SAAUb,S,kCCrB1B,iDAqBec,IAhBf,YAA6B,IAAbD,EAAY,EAAZA,SACd,OACE,oCACGA,EAASpB,KAAI,SAAAsB,GAAG,OACf,kBAAC,OAAD,CAAMpB,IAAKoB,EAAKrC,GAAE,SAAWC,kBAAQoC,IACnC,4BAAQtC,UAAU,WAAWsC","file":"component---src-templates-blogs-page-js-d627f71b0efab2339d7d.js","sourcesContent":["import React from \"react\"\r\nimport { Link } from \"gatsby\"\r\nimport { slugify } from \"../util/utilityFunctions\"\r\n\r\nconst AuthorAndDate = ({ author, date }) => {\r\n  return (\r\n    <p className=\"info\">\r\n      By <Link to={`/authors/${slugify(author)}`} className=\"link\">{author}</Link>, on {date}.\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default AuthorAndDate\r\n","const slugify = function (text) {\r\n  return text\r\n    .toString()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n    .replace(/[^\\w-]+/g, \"\") // Remove all non-word chars\r\n    .replace(/--+/g, \"-\") // Replace multiple - with single -\r\n    .replace(/^-+/, \"\") // Trim - from start of text\r\n    .replace(/-+$/, \"\") // Trim - from end of text\r\n}\r\n\r\nmodule.exports = { slugify }\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport Posts from \"../components/Posts\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst BlogsPage = ({ data }) => {\r\n  const post = data.allMarkdownRemark\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"All Articles\" />\r\n      <section className=\"all-blogs\">\r\n        {post.edges.map(({ node }) => (\r\n          <Posts\r\n            key={node.id}\r\n            slug={node.fields.slug}\r\n            title={node.frontmatter.title}\r\n            author={node.frontmatter.author}\r\n            date={node.frontmatter.date}\r\n            tags={node.frontmatter.tags}\r\n            imgSrc={node.frontmatter.image\r\n              .slice(0, 1)\r\n              .map(i => i.childImageSharp.fluid.src)}\r\n          />\r\n        ))}\r\n      </section>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const blogsQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            title\r\n            author\r\n            date(formatString: \"MMM Do YYYY\")\r\n            tags\r\n            image {\r\n              childImageSharp {\r\n                fluid(maxWidth: 512, maxHeight: 512) {\r\n                  ...GatsbyImageSharpFluid\r\n                }\r\n              }\r\n            }\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport default BlogsPage\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport \"../components/CSS/main.css\"\r\nimport Tags from \"./Tags\"\r\nimport AuthorAndDate from \"./AuthorAndDate\"\r\n\r\nconst Posts = ({ title, slug, author, date, imgSrc, tags, clName = \"\" }) => {\r\n  return (\r\n    <Link to={`/${slug}`}>\r\n      <section className={`post ${clName}`}>\r\n        <img\r\n          src={imgSrc}\r\n          alt=\"Blog Cover\"\r\n          width=\"128px\"\r\n          height=\"128px\"\r\n          id=\"blog-img\"\r\n        />{\" \"}\r\n        <section className=\"blog-info\">\r\n          <h3>{title}</h3>\r\n          <AuthorAndDate author={author} date={date} />\r\n          <Tags tagsList={tags} />\r\n        </section>\r\n      </section>\r\n    </Link>\r\n  )\r\n}\r\n\r\nPosts.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  slug: PropTypes.string.isRequired,\r\n  date: PropTypes.string.isRequired,\r\n  tags: PropTypes.array,\r\n}\r\n\r\nexport default Posts\r\n","import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Link } from \"gatsby\"\r\nimport { slugify } from \"../util/utilityFunctions\"\r\n\r\nfunction Tags({ tagsList }) {\r\n  return (\r\n    <>\r\n      {tagsList.map(tag => (\r\n        <Link key={tag} to={`/tags/${slugify(tag)}`}>\r\n          <button className=\"tag-btn\">{tag}</button>\r\n        </Link>\r\n      ))}\r\n    </>\r\n  )\r\n}\r\n\r\nTags.propTypes = {\r\n  tagsList: PropTypes.array.isRequired,\r\n}\r\n\r\nexport default Tags\r\n"],"sourceRoot":""}